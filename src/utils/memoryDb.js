import mongoose from "mongoose";
import { MongoMemoryServer } from "mongodb-memory-server";

let mongoServer;

export async function connectMemoryDB() {
    try {
        console.log("üü° Iniciando MongoDB em mem√≥ria...");

        mongoServer = await MongoMemoryServer.create();
        const uri = mongoServer.getUri();

        await mongoose.connect(uri, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });

        console.log("‚úÖ Conectado ao MongoDB em mem√≥ria!");

        return mongoose;
    } catch (err) {
        console.error("‚ùå Erro ao iniciar MongoDB em mem√≥ria:", err);
        throw err;
    }
}

export async function closeMemoryDB() {
    try {
        if (mongoose.connection.readyState !== 0) {
            await mongoose.disconnect();
        }
        if (mongoServer) {
            await mongoServer.stop();
        }
        console.log("üõë Banco de dados em mem√≥ria fechado.");
    } catch (err) {
        console.error("‚ùå Erro ao fechar MongoDB em mem√≥ria:", err);
    }
}

export async function clearMemoryDB() {
    try {
        const collections = mongoose.connection.collections;

        // Limpa todas as cole√ß√µes do banco em mem√≥ria
        for (const key in collections) {
            const collection = collections[key];
            await collection.deleteMany(); 
        }

        console.log("‚úÖ Banco de dados em mem√≥ria limpo!");
    } catch (err) {
        console.error("‚ùå Erro ao limpar o banco de dados em mem√≥ria:", err);
    }
}
